{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude97 BMW CarData \u2192 MQTT Bridge","text":"<p>After BMW disabled access for bimmerconnected, an alternative solution was required. The best working replacement is the new BMW CarData MQTT streaming interface, which this bridge connects to and forwards to your local MQTT broker.</p> <p>A small C++ bridge that connects BMW ConnectedDrive CarData (MQTT) to your local Mosquitto MQTT broker. It authenticates via the official BMW OAuth2 device flow and continuously republishes vehicle telemetry in real time.</p> <p>You can run it directly on Debian/Ubuntu/Raspberry Pi or inside a Docker container \u2013 both options are fully supported.</p>"},{"location":"#features","title":"\ud83e\udde9 Features","text":"<ul> <li>MQTT v5 protocol with reason codes and reconnect logic  </li> <li>Automatic token refresh using BMW\u2019s <code>refresh_token</code> </li> <li>Local watchdog &amp; reconnect if the BMW broker drops the connection  </li> <li>Publishes a small JSON status message (<code>bmw/status</code>) showing online/offline state  </li> <li>Lightweight: depends only on <code>libmosquitto</code>, <code>libcurl</code>, and <code>nlohmann/json</code> (header-only)  </li> <li>Runs perfectly on Debian, Ubuntu, or Raspberry Pi OS  </li> <li>Docker support with ready-to-use <code>docker-compose.yml</code> </li> </ul>"},{"location":"#project-structure","title":"\ud83e\uddf1 Project Structure","text":"<pre><code>bmw-mqtt-bridge/\n\u2502\n\u251c\u2500\u2500 demo/                     # Example web client (map demo)\n\u2502   \u251c\u2500\u2500 bmwmap.html           # Simple HTML page showing vehicle on a map\n\u2502   \u2514\u2500\u2500 README.md             # Instructions for demo usage\n\u2502\n\u251c\u2500\u2500 scripts/                  # Helper scripts and utilities\n\u2502   \u251c\u2500\u2500 bmw_flow.sh           # Start OAuth2 device flow and fetch first tokens\n\u2502   \u251c\u2500\u2500 compile.sh            # Simple build script (g++)\n\u2502   \u251c\u2500\u2500 docker-entrypoint.sh  # Entrypoint for Docker container\n\u2502   \u2514\u2500\u2500 install_deps.sh       # Installs dependencies (libmosquitto, libcurl, etc.)\n\u2502\n\u251c\u2500\u2500 src/                      # Main C++ source files\n\u2502   \u251c\u2500\u2500 bmw_mqtt_bridge.cpp   # Core bridge logic (BMW \u2194 MQTT)\n\u2502   \u2514\u2500\u2500 json.hpp              # nlohmann/json header (MIT license)\n\u2502\n\u251c\u2500\u2500 .env.example              # Example environment configuration\n\u251c\u2500\u2500 docker-compose.yml        # Docker Compose setup\n\u251c\u2500\u2500 Dockerfile                # Docker image definition\n\u251c\u2500\u2500 LICENSE                   # MIT license\n\u2514\u2500\u2500 README.md                 # This file\n</code></pre>"},{"location":"#requirements","title":"\u2699\ufe0f Requirements","text":"<p>Tested on:</p> <ul> <li>Debian 12 / Ubuntu 22.04+ / Raspberry Pi OS Bookworm</li> <li>libmosquitto \u2265 2.0</li> <li>libcurl \u2265 7.74</li> <li>g++ \u2265 10</li> <li>(optional) Docker \u2265 24 with Compose plugin</li> </ul>"},{"location":"credits/","title":"\u2615 Credits","text":"<p>Developed by Kurt Docker setup and project structure by oemich extended MQTT topics by grogi Uses the official BMW CARDATA STREAMING interface </p> <p>Contributions, pull requests, and improvements are welcome!</p>"},{"location":"docker/","title":"\ud83d\udc33 Option 2 \u2013 Docker Installation","text":"<pre><code># Clone the repository and prepare the environment\ngit clone https://github.com/dj0abr/bmw-mqtt-bridge.git\ncd bmw-mqtt-bridge\n</code></pre> <p>The bridge stores its .env file and all token files on the host system under <code>~/.local/state/bmw-mqtt-bridge</code>.</p> <p>The Docker container automatically links to this folder, so host and container share the same configuration and tokens. You can freely switch between Docker and the classic bare-metal version without re-authenticating.</p> <pre><code># Authenticate with BMW (creates .env automatically)\ndocker compose run --rm -it bmw-bridge ./bmw_flow.sh\n</code></pre> <p>If this is your first run, it will create <code>~/.local/state/bmw-mqtt-bridge/.env</code> and open the editor asking you to enter your CLIENT_ID and GCID (and other environment variables, if required) before continuing. After you\u2019ve saved and closed the editor, run the above command again.</p> <p>Open the displayed URL in your browser, log in, then return and press ENTER.</p> <pre><code># Start bridge\ndocker compose up -d\n\n# Logs\ndocker compose logs -f bmw-bridge\n</code></pre> <p>The bridge will now automatically stream BMW CarData to your local MQTT broker.</p>"},{"location":"env/","title":"\u2699\ufe0f Environment Variables (.env)","text":"<p>This page lists all environment variables the bridge reads at runtime and how they behave. Values are loaded from the <code>.env</code> file located in the token directory (see below). Quotes in <code>.env</code> are supported.</p>"},{"location":"env/#token-env-location-fixed","title":"\ud83d\udcc4 Token &amp; .env Location (fixed)","text":"<p>The program loads <code>.env</code> from the token directory created by <code>scripts/bmw_flow.sh</code>:</p> <ul> <li>Default: <code>$HOME/.local/state/bmw-mqtt-bridge/.env</code></li> <li>If <code>$XDG_STATE_HOME</code> is set: <code>${XDG_STATE_HOME}/bmw-mqtt-bridge/.env</code></li> </ul>"},{"location":"env/#bmw-cardata-broker","title":"\ud83c\udf10 BMW CarData Broker","text":"Variable Type Default Required Description <code>CLIENT_ID</code> str (none) Yes BMW CarData Client ID (GUID) from the MyBMW portal. Placeholder values are rejected. <code>GCID</code> str (none) Yes BMW GCID / username for the MQTT broker (from \u201cShow Connection Details\u201d). Placeholder values are rejected. <code>BMW_HOST</code> str <code>customer.streaming-cardata.bmwgroup.com</code> No BMW CarData MQTT hostname. <code>BMW_PORT</code> int <code>9000</code> No BMW CarData MQTT port. <p>Validation on startup: - If <code>CLIENT_ID</code> or <code>GCID</code> are missing/placeholder \u2192 the program exits with an error.</p>"},{"location":"env/#local-mqtt-broker-mosquitto","title":"\ud83c\udfe0 Local MQTT Broker (Mosquitto)","text":"Variable Type Default Required Description <code>LOCAL_HOST</code> str <code>127.0.0.1</code> No Host/IP of your local MQTT broker. <code>LOCAL_PORT</code> int <code>1883</code> No Port of your local MQTT broker. <code>LOCAL_USER</code> str (empty) No Username for local broker authentication (optional). <code>LOCAL_PASSWORD</code> str (empty) No Password for local broker authentication (optional)."},{"location":"env/#topic-prefix-status-topic","title":"\ud83e\udded Topic Prefix &amp; Status Topic","text":"Variable Type Default Required Description <code>LOCAL_PREFIX</code> str <code>bmw/</code> No Topic prefix for all republished topics. If empty, the program falls back to <code>bmw/</code>. A trailing slash is enforced automatically. <code>STATUS_STABLE_DELAY</code> int 5 No delay time for bmw connection state true-&gt;false: anti flickering during token refresh"},{"location":"env/#split-topics","title":"\u2702\ufe0f Split Topics","text":"Variable Type Default Required Description <code>SPLIT_TOPICS</code> int <code>0</code> No <code>0</code> = disabled, <code>1</code> = enabled. When enabled, JSON payloads are parsed and individual fields are republished under <code>vehicles/&lt;VIN&gt;/&lt;propertyName&gt;</code>."},{"location":"env/#retained-messages","title":"\ud83d\udd01 Retained Messages","text":"Variable Type Default Required Description <code>MQTT_RETAIN</code> int <code>0</code> No <code>0</code> = do not retain (default), <code>1</code> = retain republished topics. Affects RAW, Legacy, and Split topics. The status topic is always retained regardless of this setting."},{"location":"ids/","title":"\ud83c\udd94 Get Your BMW IDs","text":"<p>Before you can use the bridge, you must retrieve your personal BMW CarData identifiers.</p> <p>The script <code>scripts/bmw_flow.sh</code> automatically creates <code>~/.local/state/bmw-mqtt-bridge/.env</code> and guides you to fill in the IDs which you get with the following procedure:</p> <ol> <li>Go to the MyBMW website    (You should already have an account and your car must be registered.)</li> <li>Navigate to Personal Data \u2192 My Vehicles \u2192 CarData </li> <li>Click on \"Create Client ID\"    \u26a0\ufe0f Do not click on \"Authenticate Vehicle\"! </li> <li>Copy the Client ID and insert it into the <code>.env</code> file  </li> <li>Scroll down to CARDATA STREAM \u2192 Show Connection Details </li> <li>Copy the USERNAME and insert it into <code>.env</code> file as GCID </li> <li>The other options in the <code>.env</code> file are for advanced setups \u2013 you can safely ignore them in most cases  </li> </ol> <p>After this setup, your bridge will be able to authenticate against the official BMW CarData MQTT interface.</p> <p>At CARDATA STREAM don't forget to click <code>Change data selection</code> and activate the topics you want to receive.</p>"},{"location":"install/","title":"\u2699\ufe0f Installation","text":"<p>You can install and run the bridge either natively (bare metal) or via Docker.</p>"},{"location":"install/#option-1-classic-installation-without-docker","title":"\ud83e\udde9 Option 1 \u2013 Classic Installation (without Docker)","text":"<p>For direct use on Debian, Ubuntu or Raspberry Pi OS.</p> <pre><code># Clone the repository\ngit clone https://github.com/dj0abr/bmw-mqtt-bridge.git\ncd bmw-mqtt-bridge\n\n# Make scripts executable\nchmod +x scripts/*.sh\n\n# Install dependencies\n./scripts/install_deps.sh\n\n# Compile\n./scripts/compile.sh\n\n# Run OAuth2 Device Flow (creates .env automatically)\n./scripts/bmw_flow.sh\n</code></pre> <p>If this is your first run, the script will:</p> <ul> <li>create ~/.local/state/bmw-mqtt-bridge/</li> <li>open nano with a new .env file \u2192 insert your CLIENT_ID and GCID there, then save and exit.</li> </ul> <p>After that, open the displayed URL in your browser, log in, then return to the terminal and press ENTER.</p>"},{"location":"install/#then-start-the-bridge","title":"Then start the bridge:","text":"<pre><code>./src/bmw_mqtt_bridge\n</code></pre>"},{"location":"license/","title":"\ud83e\uddfe License","text":"<p>MIT License Copyright (c) 2025 Kurt, DJ0ABR</p> <p>This project also includes <code>nlohmann/json</code> licensed under the MIT License.</p>"},{"location":"mqtt/","title":"\ud83c\udf10 MQTT Topics and Environment Variables","text":""},{"location":"mqtt/#status-topic-prefix","title":"Status Topic Prefix","text":"<p>By default, the bridge publishes its connection status to:</p> <pre><code>bmw/status\n</code></pre> <p>If you want a different topic prefix (for example if you have multiple cars or bridges), you can configure it using this environment variable in your .env file:</p> <pre><code>LOCAL_PREFIX=mycar/\n</code></pre> <p>The bridge will then publish:</p> <pre><code>mycar/status\n</code></pre> <p>and all other MQTT messages (e.g. <code>raw</code>, <code>vehicles</code>, etc.) under the same prefix.</p> <p>status:</p> <p>Reports the connection state to the BMW MQTT broker (true = connected, false = disconnected).</p> <p>true is published immediately when the connection is established.</p> <p>false is published only after STATUS_STABLE_DELAY seconds of continuous disconnect (default: 5).</p> <p>Set STATUS_STABLE_DELAY=0 to disable the delay (instant switching).</p> <p>This debounce avoids brief drops (e.g., during token refresh) from causing flicker in clients that monitor the status.</p>"},{"location":"mqtt/#split-topics-structured-json-publishing","title":"Split Topics (Structured JSON Publishing)","text":"<p>By default, the bridge republishes BMW CarData messages exactly as received into a local topic of the form:</p> <pre><code>bmw/raw/&lt;VIN&gt;/&lt;eventName&gt;\n</code></pre> <p>To make integration easier for automation systems (like Home Assistant, Node-RED, etc.), you can optionally enable split topics, which publish each data field under its own sub-topic:</p> <p>add to your <code>.env</code> file:</p> <pre><code>SPLIT_TOPICS=1\n</code></pre> <p>This will create additional messages like:</p> <pre><code>bmw/vehicles/&lt;VIN&gt;/fuelPercentage {\"value\":62.5,\"unit\":\"%\",\"timestamp\":1739790000}\nbmw/vehicles/&lt;VIN&gt;/range_km       {\"value\":420}\nbmw/vehicles/&lt;VIN&gt;/position       {\"value\":{\"lat\":48.1,\"lon\":11.6},\"timestamp\":1739790100}\n</code></pre>"},{"location":"retain/","title":"\ud83d\udd01 MQTT Retain (optional)","text":"<p>To ensure Home Assistant and other clients immediately see the last known state after a restart, the bridge can publish its republished MQTT messages with the Retain flag.</p> <p>Default: off (<code>MQTT_RETAIN=0</code>) When enabled: Retain applies to: - <code>bmw/raw/&lt;VIN&gt;/&lt;eventName&gt;</code> - <code>bmw/&lt;VIN&gt;/&lt;eventName&gt;</code> (Legacy) - <code>bmw/vehicles/&lt;VIN&gt;/&lt;propertyName&gt;</code> (when <code>SPLIT_TOPICS=1</code>)</p> <p>The status topic <code>bmw/status</code> is always retained (LWT), regardless of this setting, to keep availability tracking consistent.</p>"},{"location":"retain/#enable","title":"Enable","text":"<p>edit the file: .env <pre><code>MQTT_RETAIN=1\n</code></pre></p>"},{"location":"retain/#clean-up-remove-retained-messages","title":"Clean up (remove retained messages)","text":"<p>If you want to clear a topic:</p> <pre><code># remove retained message (send empty retained message)\nmosquitto_pub -t 'bmw/vehicles/&lt;VIN&gt;/range_km' -r -n\n</code></pre> <p>or, alternatively, use MQTT Explorer</p>"},{"location":"retain/#notes","title":"Notes","text":"<ul> <li>For stateful topics (e.g. door lock, availability, battery values) retain is very useful.  </li> <li>For high-frequency or transient topics, retain may be undesirable (it shows an outdated snapshot).  </li> <li>If you later change your <code>LOCAL_PREFIX</code>, old retained messages under the previous prefix will remain in your broker until you remove them manually (see above).</li> </ul>"},{"location":"security/","title":"\ud83d\udd12 Security Notes","text":"<ul> <li>BMW CarData is a private API \u2014 use responsibly.  </li> <li>Never publish or share your <code>id_token</code> / <code>refresh_token</code>.  </li> <li>Tokens expire automatically; the bridge refreshes them securely.  </li> <li>Keep your Mosquitto broker private or protected by authentication.  </li> </ul>"},{"location":"service/","title":"\ud83e\uddf0 Running as a System Service","text":"<p>You can install the bridge as a systemd service so that it starts automatically on boot. Copy the sample service definition:</p> <pre><code>sudo cp service_example/bmw-mqtt-bridge.service /etc/systemd/system/\n</code></pre> <p>\ud83d\udca1 Important: Edit the file <code>/etc/systemd/system/bmw-mqtt-bridge.service</code> </p> <pre><code>sudo nano /etc/systemd/system/bmw-mqtt-bridge.service\n</code></pre> <p>and make sure that the lines</p> <pre><code>User=myUserName\nWorkingDirectory=/home/myUserName/bmw-mqtt-bridge\nExecStart=/home/myUserName/bmw-mqtt-bridge/src/bmw_mqtt_bridge\n</code></pre> <p>match the username under which you normally run the bridge  </p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable bmw-mqtt-bridge.service\nsudo systemctl start bmw-mqtt-bridge.service\n</code></pre> <p>The bridge stores its tokens in the user\u2019s home directory (<code>~/.local/state/bmw-mqtt-bridge</code>), so this must point to the correct account.</p> <p>Check the log output with:</p> <pre><code>journalctl -u bmw-mqtt-bridge -f\n</code></pre> <p>The service expects that you have already run <code>scripts/bmw_flow.sh</code> at least once to create <code>~/.local/state/bmw-mqtt-bridge/.env</code> and the token files.</p>"}]}